apiVersion: v1
data:
  scheduleHandler.js: "/**\n * Script to be placed in IDM script directory to handle
    the generation of an authorization header \n * for the scheduler and running of
    IDM calls to the IGA API.\n */\n\nrun();\n\nfunction run() {\n    if (!scanType)
    {\n        logger.warn(\"Global script variable 'scanType' is not defined.\");\n
    \       return;\n    }\n\n    // Get path of IGA API call\n    var path = getApiPath(scanType);\n
    \   if (!path) {\n        logger.warn(\"No path defined for scanType: \" + scanType);\n
    \       return;\n    }\n\n    // Get authorization header to allow call to be
    made from IDM\n    var date = new Date().toUTCString();\n    var header = getAuthorizationHeaderForSchedule(date);\n
    \   if (!header) {\n        logger.warn(\"Could not generate authorization header.\");\n
    \       return;\n    }\n\n    // Get request body and make call\n    var body
    = getRequestBody(scanType)\n    makeExternalCall(path, body, date, header)\n}\n\nfunction
    makeExternalCall(path, body, date, authorizationHeader) {\n    var params = {\n
    \       url: 'http://iga-api:3005/' + path,\n        method: 'POST',\n        headers
    : {\n        Date : date,\n        Authorization : authorizationHeader\n        },\n
    \       contentType: 'application/json',\n        body: JSON.stringify(body),\n
    \     }\n      \n      var result = openidm.action(\"external/rest\", \"call\",
    params);\n      return result;\n}\n\nfunction getApiPath(type) {\n    switch(type)
    {\n    case 'creation':\n        return 'iga/governance/certification/scan/creation';\n
    \   case 'refresh':\n        return 'iga/governance/refreshAllItems';\n    case
    'decisionExpiration':\n        return 'iga/governance/certification/items/scan/expiration';\n
    \   case 'decisionRemediation':\n        return 'iga/governance/certification/items/scan/remediation';\n
    \   case 'escalationNotification':\n        return 'iga/governance/certification/scan/escalationNotification';\n
    \   case 'expirationNotification':\n        return 'iga/governance/certification/scan/expirationNotification';\n
    \   case 'reminderNotification':\n        return 'iga/governance/certification/scan/reminderNotification';\n
    \   case 'scheduledCertification':\n        return 'iga/governance/certification';\n
    \   case 'scheduledRecon':\n        return '';\n    default:\n        return null;\n
    \   }\n}\n\nfunction getRequestBody(type) {\n    switch(type) {\n    case 'scheduledCertification':\n
    \       return {\n            templateId: templateId\n        }\n    case 'scheduledRecon':\n
    \       return {\n            \n        }\n    default:\n        return {};\n
    \   }\n}\n\nfunction getAuthorizationHeaderForSchedule(date) {\n    const mac
    = javax.crypto.Mac.getInstance(\"HmacSHA256\");\n    var secret = new java.lang.String(\"hmacsecret\");\n
    \   var secretBytes = secret.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n
    \   var secretKeySpec = new javax.crypto.spec.SecretKeySpec(secretBytes,\n                        \"HmacSHA256\");\n
    \   mac.init(secretKeySpec);\n    const currentDateTimeString =  \"Date: \" +
    date + \"\\n\"; \n    new java.lang.String(currentDateTimeString).getBytes(java.nio.charset.StandardCharsets.UTF_8);\n
    \   var signedHash = mac.doFinal(new java.lang.String(currentDateTimeString).getBytes(java.nio.charset.StandardCharsets.UTF_8));\n
    \   var base64Hash = java.util.Base64.getEncoder().encodeToString(signedHash);\n
    \   const authorizationHeader = 'Signature keyId=\"service1-hmac\",algorithm=\"hmac-sha256\",headers=\"date
    \", signature=\"' + base64Hash + '\"';\n    return authorizationHeader;\n}"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: schedule-handler
